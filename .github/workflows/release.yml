on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Install curl on Linux
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install libcurl4-openssl-dev

      - name: Build linux binary
        if: matrix.os == 'ubuntu-latest'
        run: ./gradlew linuxMainBinaries

      - name: Build macos binary
        if: matrix.os == 'macos-latest'
        run: ./gradlew macosBinaries

      - name: Build jvm distribution
        if: matrix.os == 'ubuntu-latest'
        run: ./gradlew assembleDist

      - name: 'Upload linuxX64 binary'
        uses: actions/upload-artifact@v2
        if: matrix.os == 'ubuntu-latest'
        with:
          name: linuxX64-binary
          path: service/build/bin/linux/releaseExecutable/ionos-dyndns-cli.kexe

      - name: 'Upload macosX64 binary'
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v2
        with:
          name: macosX64-binary
          path: service/build/bin/macos/releaseExecutable/ionos-dyndns-cli.kexe

      - name: 'Upload jvm distribution'
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: jvm-distribution
          path: service/build/distributions/ionos-dyndns-service.zip

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

      - name: 'Upload linuxX64 binary'
        uses: actions/upload-release-asset@v1
        if: matrix.os == 'ubuntu-latest'
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: linuxX64-binary
          asset_path: service/build/bin/linux/releaseExecutable/ionos-dyndns-cli.kexe

      - name: 'Upload macosX64 binary'
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: macosX64-binary
          asset_path: service/build/bin/macos/releaseExecutable/ionos-dyndns-cli.kexe

      - name: 'Upload jvm distribution'
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: jvm-distribution
          asset_path: service/build/distributions/ionos-dyndns-service.zip


